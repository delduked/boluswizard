// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"boluswizard/models"
)

// SignInHandlerFunc turns a function with the right signature into a sign in handler
type SignInHandlerFunc func(SignInParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SignInHandlerFunc) Handle(params SignInParams) middleware.Responder {
	return fn(params)
}

// SignInHandler interface for that can handle valid sign in params
type SignInHandler interface {
	Handle(SignInParams) middleware.Responder
}

// NewSignIn creates a new http.Handler for the sign in operation
func NewSignIn(ctx *middleware.Context, handler SignInHandler) *SignIn {
	return &SignIn{Context: ctx, Handler: handler}
}

/*
	SignIn swagger:route POST /SignIn signIn

Sign In
*/
type SignIn struct {
	Context *middleware.Context
	Handler SignInHandler
}

func (o *SignIn) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSignInParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SignInOKBody sign in o k body
//
// swagger:model SignInOKBody
type SignInOKBody struct {

	// data
	Data *models.Token `json:"Data,omitempty"`

	// error
	Error interface{} `json:"Error,omitempty"`

	// status
	Status int64 `json:"Status,omitempty"`
}

// Validate validates this sign in o k body
func (o *SignInOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SignInOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signInOK" + "." + "Data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signInOK" + "." + "Data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sign in o k body based on the context it is used
func (o *SignInOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SignInOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {
		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signInOK" + "." + "Data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signInOK" + "." + "Data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SignInOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SignInOKBody) UnmarshalBinary(b []byte) error {
	var res SignInOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
